<!DOCTYPE html>
<html>
  <head>
    <title>BearChaser</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.4/themes/hot-sneaks/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-dateFormat/1.0/jquery.dateFormat.min.js"></script>
  </head>
  <body>
    <p id='goalSection' />
    <div>
      <form id='loginForm' class='form-group'>
        <input id='username' type='text' /><br />
        <input id='password' type='password' /><br />
        <input id='rememberMe' type='checkbox' checked />Remember me<br />
        <input id='doLogin' type='button' value='Login' />
        <input id='doRegister' type='button' value='Register' />
      </form>
      <br />
      <form id='addGoalForm' class='form-group'>
        <table>
          <tr>
            <td>Title</td>
            <td><input id='goal' type='text' /></td>
          </tr>
          <tr>
            <td>Period</td>
            <td>
              <select id='periodInHours'>
                <option value='24'>Daily</option>
                <option value='48'>Every 2nd day</option>
                <option value='168'>Weekly</option>
                <option value='336'>Fortnightly</option>
                <option value='720'>Monthly</option>
                <option value='4380'>Half yearly</option>
                <option value='8760'>Yearly</option>
              </select>
            </td>
          </tr>
          <tr>
            <td>Frequency</td>
            <td><input id='frequency' type='text' value='1' /></td>
          </tr>
          <tr>
            <td>Start date</td>
            <td><input id='startDate' type='text' value='2018/01/01' /></td>
          </tr>
          <tr>
            <td></td>
            <td><input id='doAddGoal' type='button' value='Add' /></td>
          </tr>
        </table>          
      </form>
      <div style='alignment: right;'><input id='doLogOut' type='button' value='Log out' /></div>
    </div>

    <script type='text/javascript'>
      $(document).ready(function ()      
      {
        // Register.
        $('#doRegister').click(function ()
        {
          var username = $('#username').val();
          var password = $('#password').val();
        
          $.post(
            '/api/users/register',
            { 'username': username, 'password': password },
            function () { alert('Registered'); });
        });

        // Login.
        $('#doLogin').click(function ()
        {
          var username = $('#username').val();
          var password = $('#password').val();
          var usernameToStore = username;
          var passwordToStore = password;

          if ($('#rememberMe').is(':checked') === false)
          {
            usernameToStore = '';
            passwordToStore = '';
          }
          
          SetStoredValue('username', usernameToStore);
          SetStoredValue('password', passwordToStore);
                  
          $.post(
            '/api/users/login',
            { 'username': username, 'password': password },
            function (token)
            {
              $('#loginForm').hide();
              $('#addGoalForm').show();
              $('#doLogOut').show();
              UpdateToken(token);
              GetAndPopulateGoals();
            });
        });

        // Add Goal.
        $('#doAddGoal').click(function ()
        {
          var name = $('#goal').val();
          var period = $('#periodInHours').val();
          var frequency = $('#frequency').val();
          var startDate = $('#startDate').val();
        
          $.ajax({
            url: '/api/goals',
            type: 'POST',
            headers: { 'auth': GetToken() },
            data: { 'Id': 0, 'Name': name, 'PeriodInHours': period, 'FrequencyWithinPeriod': frequency, 'StartDate': startDate },
            success: function () { GetAndPopulateGoals(); },
            error: function (xhr, status, error) { alert('Error adding goal: ' + error); }
          });
        });

        // Log out.
        $('#doLogOut').click(function ()
        {
          SetStoredValue('username', '');
          SetStoredValue('password', '');
          location.reload();
        });
        
        // Do these things on load.
        $('#addGoalForm').hide();
        $('#doLogOut').hide();
        
        // Init the add-goal datepicker.
        $('#startDate').datepicker();
        $('#startDate').datepicker('option', 'dateFormat', 'yy-mm-dd');
        
        // Auto-login if we have credentials.
        $('#username').val(GetStoredValue('username'));
        $('#password').val(GetStoredValue('password'));

        if ($('#username').val().length > 0 && $('#password').val().length > 0)
        {
          document.getElementById('doLogin').click();
        }
      });
      
      function UpdateToken(data)
      {
        var token = data.replace(/\"/g, '');
        SetSessionValue('token', token);
      }
      
      function GetAndPopulateGoals()      
      {
        $.ajax({
          url: '/api/goals',
          type: 'GET',
          headers: { 'auth': GetToken() },
          contentType: 'application/json; charset=utf-8',
          success: function (data) { console.log('Retrieved goals.'); PopulateGoals(data); },
          error: function (xhr, status, error) { alert('Error retrieving goals: ' + error); }
        });
      }
      
      function PopulateGoals(goals)
      {
        console.log(goals);
        
        goals = JSON.parse(goals);
        
        var content = '<table cellPadding="4">';
        
        $.each(goals, function(i, e)
        {
          content +=
            "<tr><td>" + e.Name + "</td>" +
            "<td><input id='goalAttempt" + e.Id + "' type='button' value='+' onclick='CreateGoalAttempt(" + e.Id + ")' /></td>" +
            "<td><span id='statsPlaceholderForGoal" + e.Id + "' /></td>" +
            "<td><input id='removeLastAttempt" + e.Id + "' type='button' value='-' onclick='RemoveLastGoalAttempt(" + e.Id + ")' /></td>" +
            "</tr>";
        });
        
        $('#goalSection').html(content);
        
        $.each(goals, function(i, e)
        {
          GetAndPopulateStats(e.Id);
        });
      }
      
      function GetAndPopulateStats(goalId)
      {
        $.ajax({
          url: '/api/goals/periodStats?goalId=' + goalId,
          type: 'GET',
          headers: { 'auth': GetToken() },
          contentType: 'application/json; charset=utf-8',
          success: function (data) { console.log('Retrieved attempts.'); PopulateStats(data, goalId); },
          error: function (xhr, status, error) { alert('Error retrieving attempts: ' + error); }
        });
      }
      
      function PopulateStats(data, goalId)
      {
        var stats = JSON.parse(data);
        
        var friendlyTimeRemaining = '---';
        if (stats.AttemptCount < stats.TargetAttemptCount)
        {
          friendlyTimeRemaining = GetFriendlyTimeDifference(stats.PeriodEnd);
        }

        var friendlyTimeSinceLastAttempt = '---';
        if (stats.LastAttemptDate != null)
        {
          friendlyTimeSinceLastAttempt = GetFriendlyTimeDifference(stats.LastAttemptDate);
        }

        var periodProgress = CalculatePeriodCompletionNow(stats.PeriodStart, stats.PeriodEnd);
        var periodProgressColour = GetColourForPeriodProgress(periodProgress);
       
        $('#statsPlaceholderForGoal' + goalId).html(
          '<table cellPadding="3" class="form-control" width=100%><tr>' +
          '<td width=20%><span class="text-nowrap"><b>' + stats.AttemptCount + '/' + stats.TargetAttemptCount + '</b></span></td>' +
          '<td width=20%><span class="text-nowrap small">' +
            '<table>' +
              '<tr><td style="text-align: center; color: ' + periodProgressColour + ';">' + friendlyTimeRemaining + '</td></tr>' +
              '<tr><td style="color: lightgrey; text-align: center;">' + friendlyTimeSinceLastAttempt + '</td></tr>' +
            '</table>' +
          '</span></td>' +
          '<td style="text-align: center;"><span class="text-nowrap"><b>' + stats.AverageCompletionAcrossLast3Periods + '% - ' + stats.AverageCompletionAcrossAllPeriods + '%</b></span></td>' +
          '</tr></table>');
      }
      
      function CreateGoalAttempt(goalId)
      {
        $.ajax({
          url: '/api/goalAttempts',
          type: 'POST',
          headers: { 'auth': GetToken() },
          data: { 'Id': 0, 'GoalId': goalId, 'Timestamp': null },
          success: function () { console.log('Added goal-attempt.'); GetAndPopulateStats(goalId); },
          error: function (xhr, status, error) { alert('Error adding goal-attempt: ' + error); }
        });
      }

      function RemoveLastGoalAttempt(goalId)
      {
        if (confirm('Delete the last goal attempt?') == false)
        {
          return;
        }
      
        $.ajax({
          url: '/api/goalAttempts?goalId=' + goalId,
          type: 'DELETE',
          headers: { 'auth': GetToken() },
          success: function () { console.log('Removed goal-attempt.'); GetAndPopulateStats(goalId); },
          error: function (xhr, status, error) { alert('Error removing last goal-attempt: ' + error); }
        });
      }
      
      function GetFriendlyTimeDifference(date)
      {
        date = date.replace('T', 'Z');

        var utcNow = Date.now();
        var testDate = new Date(date);
        var diff = Math.abs(testDate - utcNow);
        var hours = Math.floor(diff / 1000 / 60 / 60);
        var days = Math.floor(hours / 24);
        var weeks = Math.floor(days / 7);
        var months = Math.floor(weeks / 4);
        var resultValue = 0;
        var resultUnit = '';
        
        if (months > 0)
        {
          resultValue = months;
          resultUnit = 'month';
        }
        else if (weeks > 0)
        {
          resultValue = weeks;
          resultUnit = 'week';
        }
        else if (days > 0)
        {
          resultValue = days;
          resultUnit = 'day';
        }
        else if (hours > 0)
        {
          resultValue = hours;
          resultUnit = 'hour';
        }
        else
        {
          resultValue = null;
          resultUnit = '< hour';
        }

        var resultString = '';

        if (resultValue != null)
        {
          resultString = resultValue + ' ';
        }

        return resultString + (resultValue > 1 ? resultUnit + 's' : resultUnit);
      }

      function CalculatePeriodCompletionNow(periodStart, periodEnd)
      {
        periodStart = periodStart.replace('T', 'Z');
        periodEnd = periodEnd.replace('T', 'Z');

        var now = Date.now();
        var start = (new Date(periodStart)).getTime();
        var end = (new Date(periodEnd)).getTime();

        return (now - start) / (end - start);
      }

      function GetColourForPeriodProgress(progress)
      {
        if (progress < 0.5)
        {
          return 'green';
        }
        
        if (progress < 0.75)
        {
          return 'orange';
        }

        return 'red';
      }
      
      function GetCookie(name)
      {
        var re = new RegExp(name + "=([^;]+)");
        var value = re.exec(document.cookie);
        return (value != null) ? unescape(value[1]) : null;
      }
      
      function GetToken()
      {
        return GetSessionValue('token');
      }
      
      function GetStoredValue(name, defaultValue)
      {
        if (typeof(Storage) == 'undefined')
        {
          console.log('No local-storage available.');
          return defaultValue;
        }
        
        return localStorage.getItem(name);
      }

      function SetStoredValue(name, value)
      {
        if (typeof(Storage) == 'undefined')
        {
          console.log('No local-storage available.');
          return defaultValue;
        }
        
        localStorage.setItem(name, value);
      }
      
      function GetSessionValue(name, defaultValue)
      {
        if (typeof(Storage) == 'undefined')
        {
          console.log('No local-storage available.');
          return defaultValue;
        }
        
        return sessionStorage.getItem(name);
      }

      function SetSessionValue(name, value)
      {
        if (typeof(Storage) == 'undefined')
        {
          console.log('No local-storage available.');
          return defaultValue;
        }
        
        sessionStorage.setItem(name, value);
      }
    </script
  </body>
</html>